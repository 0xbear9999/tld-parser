{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { BN } from 'bn.js';\nimport { sha256 } from \"@ethersproject/sha2\";\n\nimport {\n    ANS_PROGRAM_ID,\n    MAIN_DOMAIN_PREFIX,\n    NAME_HOUSE_PREFIX,\n    NAME_HOUSE_PROGRAM_ID,\n    NFT_RECORD_PREFIX,\n    ORIGIN_TLD,\n    TLD_HOUSE_PREFIX,\n    TLD_HOUSE_PROGRAM_ID,\n} from './constants';\nimport { NameRecordHeader } from './state/name-record-header';\nimport { Tag } from './types/tag';\nimport { NftRecord } from './state/nft-record';\n\n/**\n * retrieves raw name account\n *\n * @param hashedName hashed name of the name account\n * @param nameClass defaults to pubkey::default()\n * @param parentName defaults to pubkey::default()\n */\nexport function getNameAccountKeyWithBump(\n    hashedName: Buffer,\n    nameClass?: PublicKey,\n    parentName?: PublicKey,\n): [PublicKey, number] {\n    const seeds = [\n        hashedName,\n        nameClass ? nameClass.toBuffer() : Buffer.alloc(32),\n        parentName ? parentName.toBuffer() : Buffer.alloc(32),\n    ];\n\n    return PublicKey.findProgramAddressSync(seeds, ANS_PROGRAM_ID);\n}\n\n/**\n * retrieves owner of the name account\n *\n * @param connection sol connection\n * @param nameAccountKey nameAccount to get owner of.\n */\nexport async function getNameOwner(\n    connection: Connection,\n    nameAccountKey: PublicKey,\n    tldHouse?: PublicKey,\n): Promise<PublicKey | undefined> {\n    const owner = (\n        await NameRecordHeader.fromAccountAddress(connection, nameAccountKey)\n    )?.owner;\n    if (!tldHouse) return owner;\n    const [nameHouse] = findNameHouse(tldHouse);\n    const [nftRecord] = findNftRecord(nameAccountKey, nameHouse);\n    if (owner?.toBase58() !== nftRecord.toBase58()) return owner;\n    return await getMintOwner(connection, nftRecord);\n}\n\n/**\n * computes hashed name\n *\n * @param name any string or domain name.\n */\n export async function getHashedName(name: string): Promise<Buffer> {\n  const input = NameRecordHeader.HASH_PREFIX + name;\n  const str = sha256(Buffer.from(input, \"utf8\")).slice(2);\n  return Buffer.from(str, \"hex\");\n}\n\n/**\n * A constant in tld house.\n *\n * get origin name account should always equal to 3mX9b4AZaQehNoQGfckVcmgmA6bkBoFcbLj9RMmMyNcU\n *\n * @param originTld\n */\nexport async function getOriginNameAccountKey(\n    originTld: string = ORIGIN_TLD,\n): Promise<PublicKey> {\n    const hashed_name = await getHashedName(originTld);\n    const [nameAccountKey] = await getNameAccountKeyWithBump(\n        hashed_name,\n        undefined,\n        undefined,\n    );\n    return nameAccountKey;\n}\n\n/**\n * finds list of all name accounts for a particular user.\n *\n * @param connection sol connection\n * @param userAccount user's public key\n * @param parentAccount nameAccount's parentName\n */\nexport async function findOwnedNameAccountsForUser(\n    connection: Connection,\n    userAccount: PublicKey,\n    parentAccount: PublicKey | undefined,\n): Promise<PublicKey[]> {\n    const filters: any = [\n        {\n            memcmp: {\n                offset: 40,\n                bytes: userAccount.toBase58(),\n            },\n        },\n    ];\n\n    if (parentAccount) {\n        filters.push({\n            memcmp: {\n                offset: 8,\n                bytes: parentAccount.toBase58(),\n            },\n        });\n    }\n\n    const accounts = await connection.getProgramAccounts(ANS_PROGRAM_ID, {\n        filters: filters,\n    });\n    return accounts.map((a: any) => a.pubkey);\n}\n\nexport function findMainDomain(user: PublicKey) {\n    return PublicKey.findProgramAddressSync(\n        [Buffer.from(MAIN_DOMAIN_PREFIX), user.toBuffer()],\n        TLD_HOUSE_PROGRAM_ID,\n    );\n}\n\n/**\n * finds list of all tld house accounts live.\n *\n * @param connection sol connection\n */\nexport async function getAllTld(connection: Connection): Promise<\n    Array<{\n        tld: String;\n        parentAccount: PublicKey;\n    }>\n> {\n    const tldHouseDiscriminator = [247, 144, 135, 1, 238, 173, 19, 249];\n    const filters: any = [\n        {\n            memcmp: {\n                offset: 0,\n                bytes: tldHouseDiscriminator,\n            },\n        },\n    ];\n\n    const accounts = await connection.getProgramAccounts(TLD_HOUSE_PROGRAM_ID, {\n        filters: filters,\n    });\n\n    const tldsAndParentAccounts: {\n        tld: String;\n        parentAccount: PublicKey;\n    }[] = [];\n\n    accounts.map(({ account }) => {\n        const parentAccount = getParentAccountFromTldHouseAccountInfo(account);\n        const tld = getTldFromTldHouseAccountInfo(account);\n        tldsAndParentAccounts.push({ tld, parentAccount });\n    });\n    return tldsAndParentAccounts;\n}\n\nexport function getTldFromTldHouseAccountInfo(\n    tldHouseData: AccountInfo<Buffer>,\n) {\n    const tldStart = 8 + 32 + 32 + 32;\n    const tldBuffer = tldHouseData?.data?.subarray(tldStart);\n    const nameLength = new BN(tldBuffer?.subarray(0, 4), 'le').toNumber();\n    return tldBuffer\n        .subarray(4, 4 + nameLength)\n        .toString()\n        .replace(/\\0.*$/g, '');\n}\n\nexport function getParentAccountFromTldHouseAccountInfo(\n    tldHouseData: AccountInfo<Buffer>,\n) {\n    const parentAccountStart = 8 + 32 + 32;\n    const parentAccountBuffer = tldHouseData?.data?.subarray(\n        parentAccountStart,\n        parentAccountStart + 32,\n    );\n\n    return new PublicKey(parentAccountBuffer);\n}\n\n/**\n * finds list of all domains in parent account from tld.\n *\n * @param connection sol connection\n * @param parentAccount nameAccount's parentName\n */\nexport async function findAllDomainsForTld(\n    connection: Connection,\n    parentAccount: PublicKey,\n): Promise<NameRecordHeader[]> {\n    const filters: any = [\n        {\n            memcmp: {\n                offset: 8,\n                bytes: parentAccount.toBase58(),\n            },\n        },\n    ];\n\n    const accounts = await connection.getProgramAccounts(ANS_PROGRAM_ID, {\n        filters: filters,\n    });\n    return accounts.map((a: any) => a.pubkey);\n}\n\nexport async function getMintOwner(\n    connection: Connection,\n    nftRecord: PublicKey,\n) {\n    try {\n        const nftRecordData = await NftRecord.fromAccountAddress(\n            connection,\n            nftRecord,\n        );\n        if (nftRecordData.tag !== Tag.ActiveRecord) return;\n        const largestAccounts = await connection.getTokenLargestAccounts(\n            nftRecordData.nftMintAccount,\n        );\n        const largestAccountInfo = await connection.getParsedAccountInfo(\n            largestAccounts.value[0].address,\n        );\n        if (!largestAccountInfo.value.data) return;\n        // @ts-ignore\n        return new PublicKey(largestAccountInfo.value.data.parsed.info.owner);\n    } catch {\n        return undefined;\n    }\n}\n\nexport function findNftRecord(\n    nameAccount: PublicKey,\n    nameHouseAccount: PublicKey,\n) {\n    return PublicKey.findProgramAddressSync(\n        [\n            Buffer.from(NFT_RECORD_PREFIX),\n            nameHouseAccount.toBuffer(),\n            nameAccount.toBuffer(),\n        ],\n        NAME_HOUSE_PROGRAM_ID,\n    );\n}\n\nexport function findTldHouse(tldString: string) {\n    tldString = tldString.toLowerCase();\n    return PublicKey.findProgramAddressSync(\n        [Buffer.from(TLD_HOUSE_PREFIX), Buffer.from(tldString)],\n        TLD_HOUSE_PROGRAM_ID,\n    );\n}\n\nexport function findNameHouse(tldHouse: PublicKey) {\n    return PublicKey.findProgramAddressSync(\n        [Buffer.from(NAME_HOUSE_PREFIX), tldHouse.toBuffer()],\n        NAME_HOUSE_PROGRAM_ID,\n    );\n}\n"]}