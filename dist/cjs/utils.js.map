{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6CAAsD;AACtD,mCAAkC;AAElC,2CAAuD;AACvD,mCAAyC;AAEzC;;;;;;GAMG;AACH,SAAsB,yBAAyB,CAC7C,UAAkB,EAClB,SAAqB,EACrB,UAAsB;;QAEtB,MAAM,KAAK,GAAG;YACZ,UAAU;YACV,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YACnD,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;SACtD,CAAC;QAEF,OAAO,MAAM,mBAAS,CAAC,kBAAkB,CAAC,KAAK,EAAE,0BAAc,CAAC,CAAC;IACnE,CAAC;CAAA;AAZD,8DAYC;AAED;;;;;GAKG;AACH,SAAsB,YAAY,CAChC,UAAsB,EACtB,cAAyB;;;QAEzB,OAAO,MAAA,CAAC,MAAM,wBAAgB,CAAC,kBAAkB,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,0CAC1E,KAAK,CAAC;;CACX;AAND,oCAMC;AAED;;;;GAIG;AAEH,SAAgB,aAAa,CAAC,IAAY;IACxC,MAAM,KAAK,GAAG,wBAAgB,CAAC,WAAW,GAAG,IAAI,CAAC;IAClD,MAAM,MAAM,GAAG,IAAA,mBAAU,EAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;IACnE,OAAO,MAAM,CAAC;AAChB,CAAC;AAJD,sCAIC;AAED;;;;;;GAMG;AACH,SAAsB,uBAAuB,CAC3C,YAAoB,sBAAU;;QAE9B,MAAM,WAAW,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;QAC7C,MAAM,CAAC,cAAc,CAAC,GAAG,MAAM,yBAAyB,CACtD,WAAW,EACX,SAAS,EACT,SAAS,CACV,CAAC;QACF,OAAO,cAAc,CAAC;IACxB,CAAC;CAAA;AAVD,0DAUC;AAED;;;;;;GAMG;AACH,SAAsB,4BAA4B,CAChD,UAAsB,EACtB,WAAsB,EACtB,aAAoC;;QAEpC,MAAM,OAAO,GAAQ;YACnB;gBACE,MAAM,EAAE;oBACN,MAAM,EAAE,EAAE;oBACV,KAAK,EAAE,WAAW,CAAC,QAAQ,EAAE;iBAC9B;aACF;SACF,CAAC;QAEF,IAAI,aAAa,EAAE;YACjB,OAAO,CAAC,IAAI,CAAC;gBACX,MAAM,EAAE;oBACN,MAAM,EAAE,CAAC;oBACT,KAAK,EAAE,aAAa,CAAC,QAAQ,EAAE;iBAChC;aACF,CAAC,CAAC;SACJ;QAED,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,kBAAkB,CAAC,0BAAc,EAAE;YACnE,OAAO,EAAE,OAAO;SACjB,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;CAAA;AA3BD,oEA2BC","sourcesContent":["import {Connection, PublicKey} from '@solana/web3.js';\nimport {createHash} from 'crypto';\n\nimport {ANS_PROGRAM_ID, ORIGIN_TLD} from './constants';\nimport {NameRecordHeader} from './state';\n\n/**\n * retrieves raw name account\n *\n * @param hashedName hashed name of the name account\n * @param nameClass defaults to pubkey::default()\n * @param parentName defaults to pubkey::default()\n */\nexport async function getNameAccountKeyWithBump(\n  hashedName: Buffer,\n  nameClass?: PublicKey,\n  parentName?: PublicKey,\n): Promise<[PublicKey, number]> {\n  const seeds = [\n    hashedName,\n    nameClass ? nameClass.toBuffer() : Buffer.alloc(32),\n    parentName ? parentName.toBuffer() : Buffer.alloc(32),\n  ];\n\n  return await PublicKey.findProgramAddress(seeds, ANS_PROGRAM_ID);\n}\n\n/**\n * retrieves owner of the name account\n *\n * @param connection sol connection\n * @param nameAccountKey nameAccount to get owner of.\n */\nexport async function getNameOwner(\n  connection: Connection,\n  nameAccountKey: PublicKey,\n): Promise<PublicKey | undefined> {\n  return (await NameRecordHeader.fromAccountAddress(connection, nameAccountKey))\n    ?.owner;\n}\n\n/**\n * computes hashed name\n *\n * @param name any string or domain name.\n */\n\nexport function getHashedName(name: string): Buffer {\n  const input = NameRecordHeader.HASH_PREFIX + name;\n  const buffer = createHash('sha256').update(input, 'utf8').digest();\n  return buffer;\n}\n\n/**\n * A constant in tld house.\n *\n * get origin name account should always equal to 3mX9b4AZaQehNoQGfckVcmgmA6bkBoFcbLj9RMmMyNcU\n *\n * @param originTld\n */\nexport async function getOriginNameAccountKey(\n  originTld: string = ORIGIN_TLD,\n): Promise<PublicKey> {\n  const hashed_name = getHashedName(originTld);\n  const [nameAccountKey] = await getNameAccountKeyWithBump(\n    hashed_name,\n    undefined,\n    undefined,\n  );\n  return nameAccountKey;\n}\n\n/**\n * finds list of all name accounts for a particular user.\n *\n * @param connection sol connection\n * @param userAccount user's public key\n * @param parentAccount nameAccount's parentName\n */\nexport async function findOwnedNameAccountsForUser(\n  connection: Connection,\n  userAccount: PublicKey,\n  parentAccount: PublicKey | undefined,\n): Promise<PublicKey[]> {\n  const filters: any = [\n    {\n      memcmp: {\n        offset: 40,\n        bytes: userAccount.toBase58(),\n      },\n    },\n  ];\n\n  if (parentAccount) {\n    filters.push({\n      memcmp: {\n        offset: 8,\n        bytes: parentAccount.toBase58(),\n      },\n    });\n  }\n\n  const accounts = await connection.getProgramAccounts(ANS_PROGRAM_ID, {\n    filters: filters,\n  });\n  return accounts.map((a: any) => a.pubkey);\n}\n"]}