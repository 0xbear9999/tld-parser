{"version":3,"file":"name-record-handler.js","sourceRoot":"","sources":["../../src/name-record-handler.ts"],"names":[],"mappings":"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","sourcesContent":["import {PublicKey} from '@solana/web3.js';\nimport {\n  getHashedName,\n  getNameAccountKeyWithBump,\n  getOriginNameAccountKey,\n} from '.';\n\n/**\n * This function can be used to compute the public key of a domain or subdomain and multi-level subdomain.\n * @param domainTld The domain to compute the public key for (e.g `vlad.poor`, `ipfs.miester.poor`, 'ipfs.super.miester.poor')\n * @returns\n */\nexport const getDomainKey = async (domainTld: string, record = false) => {\n  const domainTldSplit = domainTld.split('.');\n  if (domainTldSplit.length === 3) {\n    // handles subdomains\n    const tld = '.' + domainTldSplit[2];\n    const domain = domainTldSplit[1];\n    const subDomain = domainTldSplit[0];\n    // parent key\n    const {pubkey: parentKey} = await _getNameAccount(tld);\n    // domain key\n    const {pubkey: domainKey} = await _getNameAccount(domain, parentKey);\n    // Sub domain\n    const prefix = Buffer.from([record ? 1 : 0]).toString();\n    const sub = prefix.concat(subDomain);\n    const result = await _getNameAccount(sub, domainKey);\n    return {...result, isSub: true, parent: domainKey};\n  } else if (domainTldSplit.length === 4 && record) {\n    // handles four-level subdomain\n    const tld = '.' + domainTldSplit[3];\n    const domain = domainTldSplit[2];\n    const subDomain = domainTldSplit[1];\n    const multiLevelSubDomain = domainTldSplit[0];\n    // parent key\n    const {pubkey: parentKey} = await _getNameAccount(tld);\n    // domain key\n    const {pubkey: domainKey} = await _getNameAccount(domain, parentKey);\n    // Sub domain has to be added when we create subdomains for users which are not records\n    const {pubkey: subKey} = await _getNameAccount(\n      '\\0'.concat(subDomain),\n      domainKey,\n    );\n    // Sub record\n    const recordPrefix = Buffer.from([1]).toString();\n    const result = await _getNameAccount(\n      recordPrefix.concat(multiLevelSubDomain),\n      subKey,\n    );\n    return {...result, isSub: true, parent: domainKey, isSubRecord: true};\n  } else if (domainTldSplit.length > 4) {\n    throw new Error('Invalid derivation input');\n  }\n  // just a regular domainTld\n  const tldName = '.' + domainTldSplit[1];\n  const {pubkey: parentKeyDomainAccount} = await _getNameAccount(tldName);\n  const domain = domainTldSplit[0];\n  const result = await _getNameAccount(domain, parentKeyDomainAccount);\n  return {...result, isSub: false, parent: undefined};\n};\n\nconst _getNameAccount = async (name: string, parent?: PublicKey) => {\n  if (!parent) {\n    parent = await getOriginNameAccountKey();\n  }\n  let hashed = getHashedName(name);\n  let [pubkey] = await getNameAccountKeyWithBump(hashed, undefined, parent);\n  return {pubkey, hashed};\n};\n"]}